#+TITLE: Using Age to Publicly Post Sensitive Data
#+OPTIONS: toc:nil

* The Problem

Recently, I had an issue where I was working on a set of remote
servers and needed to copy files between different servers. Some of
the servers were sandboxes that could've been infected by malicious
software; therefore, I didn't want to leak any information in the
sandboxes about any production servers or credentials.

My first instinct was to post to pastebin. But I wanted to encrypt the
data before posting. Using GnuPG in the sandboxes was
problematic. This is where [[https://github.com/FiloSottile/age][Age]] provided a convention solution.

* The Solution

On a production machine, I can easily create a temporary Age key by
doing,

#+BEGIN_EXAMPLE
age-key -o key.txt
#+END_EXAMPLE

which gives the following output,

#+BEGIN_EXAMPLE
Public key: age15v5xqysc8g7spuzdyk0v5q90m609ruaecwnlv2x67zv5xqnju4esp2tz3j
#+END_EXAMPLE

Instead of using, pastebin for posting, we'll use
[[https://0x0.st/]] which doesn't require an API key. On the insecure
server, do the following,

#+BEGIN_EXAMPLE
age --encrypt -r age15v5xqysc8g7spuzdyk0v5q90m609ruaecwnlv2x67zv5xqnju4esp2tz3j -a /path/to/private/file | curl -F 'file=@-' https://0x0.st/
#+END_EXAMPLE

which will output a URL, such as

#+BEGIN_EXAMPLE
https://0x0.st/oM5X.txt
#+END_EXAMPLE

Now we can download this file and decrypt it in a safe location.

#+BEGIN_EXAMPLE
curl -s https://0x0.st/oM5X.txt | age --decrypt -i key.txt -o secret_file.txt
#+END_EXAMPLE

* Solution Simplification

We can make this process smoother by writing two scripts. An upload
script such as,

#+BEGIN_SRC shell
  #!/bin/sh

  RECIPIENTS=${RECIPIENTS:-"$@"}

  if [ -z "$RECIPIENTS" ]; then
      echo "Usage: $0 [recipient public key]..."
      exit 1
  fi

  for r in $RECIPIENTS; do
      AGEFLAGS="${AGEFLAGS} -r ${r}"
  done

  age $AGEFLAGS -a | curl -F 'file=@-' https://0x0.st/
#+END_SRC

and a download script such as,

#+BEGIN_SRC shell
  #!/bin/sh

  URL=$1
  AGEKEY=${2:-key.txt}

  if [ -z $URL ]; then
      echo "Usage: $0 url [age key file]"
      exit 1
  fi

  curl -s $URL | age --decrypt -i ${AGEKEY}
#+END_SRC


Now if I have two age keys, =key-1.txt=
(=age1dwj4jcfp9wfpslrj4gnws5y5llzetdzu0cpndtr96fr3htlgdvusk6w8tg=) and
=key-2.txt=
(=age1xqz970tzhklqp0qyz9x3c3yur3jd65urasmwer0thzc4k6y6qftq7sc2zw=), I
can upload an encrypted file for both keys by doing,

#+BEGIN_EXAMPLE -n 1
$ echo secret text | ./age-post.sh \
  age1dwj4jcfp9wfpslrj4gnws5y5llzetdzu0cpndtr96fr3htlgdvusk6w8tg \
  age1xqz970tzhklqp0qyz9x3c3yur3jd65urasmwer0thzc4k6y6qftq7sc2zw
#+END_EXAMPLE

and download the same content for each key,

#+BEGIN_EXAMPLE -n 1
$ ./age-pull.sh https://0x0.st/oM5_.txt key-1.txt
secret text
$ ./age-pull.sh https://0x0.st/oM5_.txt key-2.txt
secret text
#+END_EXAMPLE
